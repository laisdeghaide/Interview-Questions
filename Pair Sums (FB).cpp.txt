int numberOfWays(vector<int>& arr, int k) {
/* Given a list of n integers arr[0..(n-1)], 
determine the number of different pairs of elements within it which sum to k.
If an integer appears in the list multiple times, 
each copy is considered to be different; that is, 
two pairs are considered different if one pair includes at least one array index 
which the other doesn't, even if they include the same values.  
*/
// Write your code here
  unordered_map<int,int> values;
  
  for(int i=0; i<arr.size(); i++) {
    if(!values.count(arr[i])) {
      values[arr[i]] = 1;
    }
    else {
      values[arr[i]]++;
    } 
  }
  
  int counts = 0;
  for(int i=0; i<arr.size(); i++) {
    int remaining = k - arr[i];
    if(values.count(remaining)) {
      counts += values[remaining];
      
      if(remaining == arr[i])
        counts -= 1;
     }
  }
  return counts/2;
}

//Time Complexity: O(N)
//Space Complexity: O(N)